library(readr)
library(stringr)
#| label: load-data
#| include: false
data <- read_csv("ica_cleaned_data.csv", show_col_types = FALSE)
#| label: set-params
#| include: false
ministry <- params$ministry
department <- params$department
# Stop if parameters are not provided
if (is.null(ministry) || is.null(department)) {
stop("Both ministry and department parameters must be provided.")
}
#| label: loop-or-set-params
#| include: false
if (is.null(params$ministry) || is.null(params$department)) {
unique_ministry_dept <- data %>%
select(Ministry, Department) %>%
distinct() %>%
arrange(Ministry)
for (i in seq_len(nrow(unique_ministry_dept))) {
params_list <- list(
ministry = unique_ministry_dept$Ministry[i],
department = unique_ministry_dept$Department[i]
)
safe_dept <- str_replace_all(unique_ministry_dept$Department[i], "[^[:alnum:]]", "_")
safe_min <- str_replace_all(unique_ministry_dept$Ministry[i], "[^[:alnum:]]", "_")
output_file <- paste0("ICA_Report_", safe_min, "_", safe_dept, ".pdf")
quarto::quarto_render(
"ICA_Report_Template.qmd",
execute_params = params_list,
output_file = output_file,
output_format = "pdf"
)
}
} else {
ministry <- params$ministry
department <- params$department
}
year = 2025
#| include: FALSE
# Define the capacity categories, matching the exact column names in the dataset
capacity_categories <- c(
"Clarity of Vision",
"Mission and Purpose",
"Policy and Legal framework",
"Responsiveness to changes in the operating environment\n",
"Strategic plan (Corporate or business plan)",
"Strategic planning process",
"Plan review processes",
"Budget and financial management",
"Program and service relevance and integration",
"Structure and function",
"Individual job design",
"Operational procedures (e.g. staff manual/ workplace procedures)",
"Internal coordination",
"Access to suitable Administrative/ Office support staff",
"Access to suitable technical/ professional staff",
"Staff Performance and feedback",
"Human resource development and training",
"Staff retention",
"Decision making",
"Staff engagement and communication",
"Workplace meetings (e.g. management, staff, team)",
"Change management and project implementation",
"Service delivery standards",
"Stakeholder partnerships (e.g. NGO, CSOs, FBOs)",
"Organisational Performance monitoring (M&E)",
"Teamwork and the interpersonal environment",
"Service as a shared value",
"Workplace learning",
"Managing workplace and out-of-work responsibilities",
"Physical infrastructure",
"Technological infrastructure"
)
# Filter data for the current Department
dept_data <- data %>%
filter(Department == department)
#| include: FALSE
# Define the capacity categories, matching the exact column names in the dataset
capacity_categories <- c(
"Clarity of Vision",
"Mission and Purpose",
"Policy and Legal framework",
"Responsiveness to changes in the operating environment\n",
"Strategic plan (Corporate or business plan)",
"Strategic planning process",
"Plan review processes",
"Budget and financial management",
"Program and service relevance and integration",
"Structure and function",
"Individual job design",
"Operational procedures (e.g. staff manual/ workplace procedures)",
"Internal coordination",
"Access to suitable Administrative/ Office support staff",
"Access to suitable technical/ professional staff",
"Staff Performance and feedback",
"Human resource development and training",
"Staff retention",
"Decision making",
"Staff engagement and communication",
"Workplace meetings (e.g. management, staff, team)",
"Change management and project implementation",
"Service delivery standards",
"Stakeholder partnerships (e.g. NGO, CSOs, FBOs)",
"Organisational Performance monitoring (M&E)",
"Teamwork and the interpersonal environment",
"Service as a shared value",
"Workplace learning",
"Managing workplace and out-of-work responsibilities",
"Physical infrastructure",
"Technological infrastructure"
)
# Filter data for the current Department
dept_data <- data %>%
filter(Department == department)
# Calculate descriptive stats
desc_stats <- dept_data %>%
select(all_of(capacity_categories)) %>%
summarise(across(everything(), list(mean = ~mean(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
min = ~min(., na.rm = TRUE),
max = ~max(., na.rm = TRUE),
median = ~median(., na.rm = TRUE)))) %>%
pivot_longer(everything(), names_to = c("Category", ".value"), names_sep = "_") %>%
mutate(across(c(mean, sd), ~round(., 2)),
Category = str_trim(gsub("\n", "", Category)))
library(dplyr)
library(readr)
library(stringr)
library(quarto)
# Store the original working directory
original_wd <- getwd()
setwd("~/Documents/Work/ICA/ICA Report")
# Load data
data <- read_csv("ica_cleaned_data.csv", show_col_types = FALSE)
# Get unique Ministry names and convert to safe names
unique_ministries <- data %>%
select(Ministry) %>%
distinct() %>%
arrange(Ministry) %>%
mutate(safe_min = str_replace_all(Ministry, "[^[:alnum:]]", "_"))
# Print the safe Ministry names for reference
cat("Safe Ministry Names (used for folder creation):\n")
print(unique_ministries$safe_min)
# Create a folder for each unique Ministry
for (ministry in unique_ministries$safe_min) {
dir.create(file.path("Reports", ministry), showWarnings = FALSE, recursive = TRUE)
}
# Get unique Ministry and Department pairs
unique_ministry_dept <- data %>%
select(Ministry, Department) %>%
distinct() %>%
arrange(Ministry)
# Loop through each pair and render a report
for (i in seq_len(nrow(unique_ministry_dept))) {
params_list <- list(
ministry = unique_ministry_dept$Ministry[i],
department = unique_ministry_dept$Department[i]
)
# Create safe names for Ministry and Department
safe_dept <- str_replace_all(unique_ministry_dept$Department[i], "[^[:alnum:]]", "_")
safe_min <- str_replace_all(unique_ministry_dept$Ministry[i], "[^[:alnum:]]", "_")
# Define output file name (just the file name)
output_file <- paste0("ICA_Report_", safe_dept, ".pdf")
# Define the target path in the Ministry folder
ministry_folder <- file.path("Reports", safe_min)
target_path <- file.path(ministry_folder, output_file)
# Render the report to the original working directory
quarto::quarto_render(
input = file.path(original_wd, "ICA_Report_Template.qmd"),
execute_params = params_list,
output_file = output_file,
output_format = "pdf"
)
# Move the rendered PDF to the Ministry folder
if (file.exists(file.path(original_wd, output_file))) {
file.rename(file.path(original_wd, output_file), target_path)
} else {
warning(paste("PDF not found:", output_file, "for", params_list$department))
}
}
library(dplyr)
library(readr)
library(stringr)
library(quarto)
# Store the original working directory
original_wd <- getwd()
setwd("~/Documents/Work/ICA/ICA Report")
# Load data
data <- read_csv("ica_cleaned_data.csv", show_col_types = FALSE)
# Get unique Ministry names and convert to safe names
unique_ministries <- data %>%
select(Ministry) %>%
distinct() %>%
arrange(Ministry) %>%
mutate(safe_min = str_replace_all(Ministry, "[^[:alnum:]]", "_"))
# Print the safe Ministry names for reference
cat("Safe Ministry Names (used for folder creation):\n")
print(unique_ministries$safe_min)
# Create a folder for each unique Ministry
for (ministry in unique_ministries$safe_min) {
dir.create(file.path("Reports", ministry), showWarnings = FALSE, recursive = TRUE)
}
# Get unique Ministry and Department pairs
unique_ministry_dept <- data %>%
select(Ministry, Department) %>%
distinct() %>%
arrange(Ministry)
# Loop through each pair and render a report
for (i in seq_len(nrow(unique_ministry_dept))) {
params_list <- list(
ministry = unique_ministry_dept$Ministry[i],
department = unique_ministry_dept$Department[i]
)
# Create safe names for Ministry and Department
safe_dept <- str_replace_all(unique_ministry_dept$Department[i], "[^[:alnum:]]", "_")
safe_min <- str_replace_all(unique_ministry_dept$Ministry[i], "[^[:alnum:]]", "_")
# Define output file name (just the file name)
output_file <- paste0("ICA_Report_", safe_dept, ".pdf")
# Define the target path in the Ministry folder
ministry_folder <- file.path("Reports", safe_min)
target_path <- file.path(ministry_folder, output_file)
# Render the report to the original working directory
quarto::quarto_render(
input = file.path(original_wd, "ICA_Report_Template.qmd"),
execute_params = params_list,
output_file = output_file,
output_format = "pdf"
)
# Move the rendered PDF to the Ministry folder
if (file.exists(file.path(original_wd, output_file))) {
file.rename(file.path(original_wd, output_file), target_path)
} else {
warning(paste("PDF not found:", output_file, "for", params_list$department))
}
}
library(dplyr)
library(readr)
library(stringr)
library(quarto)
# Store the original working directory
original_wd <- getwd()
setwd("~/Documents/Work/ICA/ICA Report")
# Load data
data <- read_csv("ica_cleaned_data.csv", show_col_types = FALSE)
# Get unique Ministry names and convert to safe names
unique_ministries <- data %>%
select(Ministry) %>%
distinct() %>%
arrange(Ministry) %>%
mutate(safe_min = str_replace_all(Ministry, "[^[:alnum:]]", "_"))
# Print the safe Ministry names for reference
cat("Safe Ministry Names (used for folder creation):\n")
print(unique_ministries$safe_min)
# Create a folder for each unique Ministry
for (ministry in unique_ministries$safe_min) {
dir.create(file.path("Reports", ministry), showWarnings = FALSE, recursive = TRUE)
}
# Get unique Ministry and Department pairs
unique_ministry_dept <- data %>%
select(Ministry, Department) %>%
distinct() %>%
arrange(Ministry)
# Loop through each pair and render a report
for (i in seq_len(nrow(unique_ministry_dept))) {
params_list <- list(
ministry = unique_ministry_dept$Ministry[i],
department = unique_ministry_dept$Department[i]
)
# Create safe names for Ministry and Department
safe_dept <- str_replace_all(unique_ministry_dept$Department[i], "[^[:alnum:]]", "_")
safe_min <- str_replace_all(unique_ministry_dept$Ministry[i], "[^[:alnum:]]", "_")
# Define output file name (just the file name)
output_file <- paste0("ICA_Report_", safe_dept, ".pdf")
# Define the target path in the Ministry folder
ministry_folder <- file.path("Reports", safe_min)
target_path <- file.path(ministry_folder, output_file)
# Render the report to the original working directory
quarto::quarto_render(
input = file.path(original_wd, "ICA_Report_Template.qmd"),
execute_params = params_list,
output_file = output_file,
output_format = "pdf"
)
# Move the rendered PDF to the Ministry folder
if (file.exists(file.path(original_wd, output_file))) {
file.rename(file.path(original_wd, output_file), target_path)
} else {
warning(paste("PDF not found:", output_file, "for", params_list$department))
}
}
library(dplyr)
library(readr)
library(stringr)
library(quarto)
# Store the original working directory
original_wd <- getwd()
setwd("~/Documents/Work/ICA/ICA Report")
# Load data
data <- read_csv("ica_cleaned_data.csv", show_col_types = FALSE)
# Get unique Ministry names and convert to safe names
unique_ministries <- data %>%
select(Ministry) %>%
distinct() %>%
arrange(Ministry) %>%
mutate(safe_min = str_replace_all(Ministry, "[^[:alnum:]]", "_"))
# Print the safe Ministry names for reference
cat("Safe Ministry Names (used for folder creation):\n")
print(unique_ministries$safe_min)
# Create a folder for each unique Ministry
for (ministry in unique_ministries$safe_min) {
dir.create(file.path("Reports", ministry), showWarnings = FALSE, recursive = TRUE)
}
# Get unique Ministry and Department pairs
unique_ministry_dept <- data %>%
select(Ministry, Department) %>%
distinct() %>%
arrange(Ministry)
# Loop through each pair and render a report
for (i in seq_len(nrow(unique_ministry_dept))) {
params_list <- list(
ministry = unique_ministry_dept$Ministry[i],
department = unique_ministry_dept$Department[i]
)
# Create safe names for Ministry and Department
safe_dept <- str_replace_all(unique_ministry_dept$Department[i], "[^[:alnum:]]", "_")
safe_min <- str_replace_all(unique_ministry_dept$Ministry[i], "[^[:alnum:]]", "_")
# Define output file name (just the file name)
output_file <- paste0("ICA_Report_", safe_dept, ".pdf")
# Define the target path in the Ministry folder
ministry_folder <- file.path("Reports", safe_min)
target_path <- file.path(ministry_folder, output_file)
# Render the report to the original working directory
quarto::quarto_render(
input = file.path(original_wd, "ICA_Report_Template.qmd"),
execute_params = params_list,
output_file = output_file,
output_format = "pdf"
)
# Move the rendered PDF to the Ministry folder
if (file.exists(file.path(original_wd, output_file))) {
file.rename(file.path(original_wd, output_file), target_path)
} else {
warning(paste("PDF not found:", output_file, "for", params_list$department))
}
}
library(dplyr)
library(readr)
library(stringr)
library(quarto)
# Store the original working directory
original_wd <- getwd()
setwd("~/Documents/Work/ICA/ICA Report")
# Load data
data <- read_csv("ica_cleaned_data.csv", show_col_types = FALSE)
# Get unique Ministry names and convert to safe names
unique_ministries <- data %>%
select(Ministry) %>%
distinct() %>%
arrange(Ministry) %>%
mutate(safe_min = str_replace_all(Ministry, "[^[:alnum:]]", "_"))
# Print the safe Ministry names for reference
cat("Safe Ministry Names (used for folder creation):\n")
print(unique_ministries$safe_min)
# Create a folder for each unique Ministry
for (ministry in unique_ministries$safe_min) {
dir.create(file.path("Reports", ministry), showWarnings = FALSE, recursive = TRUE)
}
# Get unique Ministry and Department pairs
unique_ministry_dept <- data %>%
select(Ministry, Department) %>%
distinct() %>%
arrange(Ministry)
# Loop through each pair and render a report
for (i in seq_len(nrow(unique_ministry_dept))) {
params_list <- list(
ministry = unique_ministry_dept$Ministry[i],
department = unique_ministry_dept$Department[i]
)
# Create safe names for Ministry and Department
safe_dept <- str_replace_all(unique_ministry_dept$Department[i], "[^[:alnum:]]", "_")
safe_min <- str_replace_all(unique_ministry_dept$Ministry[i], "[^[:alnum:]]", "_")
# Define output file name (just the file name)
output_file <- paste0("ICA_Report_", safe_dept, ".pdf")
# Define the target path in the Ministry folder
ministry_folder <- file.path("Reports", safe_min)
target_path <- file.path(ministry_folder, output_file)
# Render the report to the original working directory
quarto::quarto_render(
input = file.path(original_wd, "ICA_Report_Template.qmd"),
execute_params = params_list,
output_file = output_file,
output_format = "pdf"
)
# Move the rendered PDF to the Ministry folder
if (file.exists(file.path(original_wd, output_file))) {
file.rename(file.path(original_wd, output_file), target_path)
} else {
warning(paste("PDF not found:", output_file, "for", params_list$department))
}
}
library(dplyr)
library(readr)
library(stringr)
library(quarto)
# Store the original working directory
original_wd <- getwd()
setwd("~/Documents/Work/ICA/ICA Report")
# Load data
data <- read_csv("ica_cleaned_data.csv", show_col_types = FALSE)
# Get unique Ministry names and convert to safe names
unique_ministries <- data %>%
select(Ministry) %>%
distinct() %>%
arrange(Ministry) %>%
mutate(safe_min = str_replace_all(Ministry, "[^[:alnum:]]", "_"))
# Print the safe Ministry names for reference
cat("Safe Ministry Names (used for folder creation):\n")
print(unique_ministries$safe_min)
# Create a folder for each unique Ministry
for (ministry in unique_ministries$safe_min) {
dir.create(file.path("Reports", ministry), showWarnings = FALSE, recursive = TRUE)
}
# Get unique Ministry and Department pairs
unique_ministry_dept <- data %>%
select(Ministry, Department) %>%
distinct() %>%
arrange(Ministry)
# Loop through each pair and render a report
for (i in seq_len(nrow(unique_ministry_dept))) {
params_list <- list(
ministry = unique_ministry_dept$Ministry[i],
department = unique_ministry_dept$Department[i]
)
# Create safe names for Ministry and Department
safe_dept <- str_replace_all(unique_ministry_dept$Department[i], "[^[:alnum:]]", "_")
safe_min <- str_replace_all(unique_ministry_dept$Ministry[i], "[^[:alnum:]]", "_")
# Define output file name (just the file name)
output_file <- paste0("ICA_Report_", safe_dept, ".pdf")
# Define the target path in the Ministry folder
ministry_folder <- file.path("Reports", safe_min)
target_path <- file.path(ministry_folder, output_file)
# Render the report to the original working directory
quarto::quarto_render(
input = file.path(original_wd, "ICA_Report_Template.qmd"),
execute_params = params_list,
output_file = output_file,
output_format = "pdf"
)
# Move the rendered PDF to the Ministry folder
if (file.exists(file.path(original_wd, output_file))) {
file.rename(file.path(original_wd, output_file), target_path)
} else {
warning(paste("PDF not found:", output_file, "for", params_list$department))
}
}
library(dplyr)
library(readr)
library(stringr)
library(quarto)
# Store the original working directory
original_wd <- getwd()
setwd("~/Documents/Work/ICA/ICA Report")
# Load data
data <- read_csv("ica_cleaned_data.csv", show_col_types = FALSE)
# Get unique Ministry names and convert to safe names
unique_ministries <- data %>%
select(Ministry) %>%
distinct() %>%
arrange(Ministry) %>%
mutate(safe_min = str_replace_all(Ministry, "[^[:alnum:]]", "_"))
# Print the safe Ministry names for reference
cat("Safe Ministry Names (used for folder creation):\n")
print(unique_ministries$safe_min)
# Create a folder for each unique Ministry
for (ministry in unique_ministries$safe_min) {
dir.create(file.path("Reports", ministry), showWarnings = FALSE, recursive = TRUE)
}
# Get unique Ministry and Department pairs
unique_ministry_dept <- data %>%
select(Ministry, Department) %>%
distinct() %>%
arrange(Ministry)
# Loop through each pair and render a report
for (i in seq_len(nrow(unique_ministry_dept))) {
params_list <- list(
ministry = unique_ministry_dept$Ministry[i],
department = unique_ministry_dept$Department[i]
)
# Create safe names for Ministry and Department
safe_dept <- str_replace_all(unique_ministry_dept$Department[i], "[^[:alnum:]]", "_")
safe_min <- str_replace_all(unique_ministry_dept$Ministry[i], "[^[:alnum:]]", "_")
# Define output file name (just the file name)
output_file <- paste0("ICA_Report_", safe_dept, ".pdf")
# Define the target path in the Ministry folder
ministry_folder <- file.path("Reports", safe_min)
target_path <- file.path(ministry_folder, output_file)
# Render the report to the original working directory
quarto::quarto_render(
input = file.path(original_wd, "ICA_Report_Template.qmd"),
execute_params = params_list,
output_file = output_file,
output_format = "pdf"
)
# Move the rendered PDF to the Ministry folder
if (file.exists(file.path(original_wd, output_file))) {
file.rename(file.path(original_wd, output_file), target_path)
} else {
warning(paste("PDF not found:", output_file, "for", params_list$department))
}
}
